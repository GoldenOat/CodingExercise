LC-197. ReOrder Array
https://app.laicode.io/app/problem/197?plan=3

Given an array of elements, reorder it as follow:
{ N1, N2, N3, …, N2k } → { N1, Nk+1, N2, Nk+2, N3, Nk+3, … , Nk, N2k }
{ N1, N2, N3, …, N2k+1 } → { N1, Nk+1, N2, Nk+2, N3, Nk+3, … , Nk, N2k, N2k+1 }
Try to do it in place.

Assumptions
The given array is not null

Examples
{ 1, 2, 3, 4, 5, 6} → { 1, 4, 2, 5, 3, 6 }
{ 1, 2, 3, 4, 5, 6, 7, 8 } → { 1, 5, 2, 6, 3, 7, 4, 8 }
{ 1, 2, 3, 4, 5, 6, 7 } → { 1, 4, 2, 5, 3, 6, 7 }

/**
reverse engineering: reverse mergeSort
step1: determine if the length is odd or even
step2: for each time: we split the array into chunk 1, chunk2, chunk3, chunk4; 
  we guarantee that chunk1.length == chunk3.length && chunk2.length == chunk4.length;
  then, we reverse(chunk2), reverse(chunk3), reverse(wholechunk2+3)
step3: then we reverse mergeSort, reorder(chunk1+chunk3), reorder(chunk2+chunk4);
*/

public class Solution {
  public int[] reorder(int[] array) {
    // 判断奇偶 
    if (array.length % 2 == 0) {
      reOrder(array, 0, array.length - 1);
    } else {
      reOrder(array, 0, array.length - 2);
    }
    return array;
  }
  void reOrder (int[] array, int l, int r) {
    // base case
    if (l >= r - 2) {
      return;
    }
    int size = r - l + 1;
    int m = l + size / 2;
    int lm = l + size / 4;
    int rm = m + size / 4;
  
    reverse(array, lm, m-1);
    reverse(array, m, rm-1);
    reverse(array, lm, rm-1);
    reOrder(array, l, l + (lm - l) * 2 - 1);
    reOrder(array, l + (lm - l) * 2, r);
  }
  void reverse(int[] array, int i, int j) {
    if (i >= j) {
      return;
    }
    while (i < j) {
      int temp = array[i];
      array[i ++] = array[j];
      array[j --] = temp;
    }
  }  
}


/**
TC: O(nlog(n)), log(n) levels, for each level, we reverse O(n);
SC: O(log(n))
*/
