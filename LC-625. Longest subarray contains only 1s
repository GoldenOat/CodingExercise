LC-625. Longest subarray contains only 1s
https://app.laicode.io/app/problem/625?plan=3

/**
* Given an array of integers that contains only 0s and 1s and a positive integer k, you can flip at most k 0s to 1s, return the longest subarray that contains only integer 1 after flipping.
* Assumptions:
1. Length of given array is between [1, 20000].
2. The given array only contains 1s and 0s.
3. 0 <= k <= length of given array.
* Example 1:
Input: array = [1,1,0,0,1,1,1,0,0,0], k = 2
Output: 7
Explanation: flip 0s at index 2 and 3, then the array becomes [1,1,1,1,1,1,1,0,0,0], so that the length of longest subarray that contains only integer 1 is 7.
* Example 2:
Input: array = [1,1,0,0,1,1,1,0,0,0], k = 0
Output: 3
Explanation: k is 0 so you can not flip any 0 to 1, then the length of longest subarray that contains only integer 1 is 3.
*/
/**
* look for the longest subarray that contains at most k '0's
* sliding window: slow = 0, fast = 0
* for each step: 
if nums[s] ~ nums[f], contains less than k 0s, we increment f;
if nums[s] ~ nums[f], contains more than k 0s, we increment s as well as f; 
* Tricky part: 
Since we have to find the MAXIMUM window, we never reduce the size of the window. 
We either increase the size of the window or remain same but never reduce the size.
*/


public class Solution {
  public int longestConsecutiveOnes(int[] nums, int k) {
    int s = 0;
    int f = 0;
    while (f < nums.length) {
      if (nums[f] == 0) {
        k --;
      }
      if (k < 0) {
        if (nums[s] == 1) {
          s ++;
        } else {
          k ++;
          s ++;
        }
      }
      f ++;
    }
    return f - s;    
  }
}

/**
TC: O(n), n = nums.length
SC: O(1)
*/
