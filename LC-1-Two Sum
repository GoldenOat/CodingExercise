import java.util.*;
/*
1. Two Sum
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
Time Complexity less than O(n^2)
 */

/*
uses hash table to store value and its index.
each time, we check if each element's complement (target - nums[i]targetâˆ’nums[i]) exists in the hash table.
    If it does exist, we return current element's index and its complement's index.
    if not, we add its value and index into hashMap
 */

public class Solution {

    public static int[] twoSum(int[] nums, int target) {
        int[] rslt = new int[2];
        Map<Integer, Integer> hashMap = new HashMap<>();
        for (int i = 0; i < nums.length; i ++) {
            int remain = target - nums[i];
            if (hashMap.containsKey(remain)) {
                rslt[0] = i;
                rslt[1] = hashMap.get(remain);
            } else {
                hashMap.put(nums[i], i);
            }
        }
        return rslt;
    }

    public static void main(String[] args) {
        int[] nums = {2, 7, 11, 15};
        int target = 18;
        int[] rslt;
        rslt = twoSum(nums, target);
        for (int i : rslt) {
            System.out.println(i);
        }
    }
}
/*
TC: O(n)
SC: O(n)
*/


