20. Valid Parentheses
https://leetcode.com/problems/valid-parentheses/

class Solution {
    public boolean isValid(String s) {
        // corner case
        if (s.length() % 2 != 0) {
            return false;
        }
        Deque<Character> stack = new ArrayDeque<>();
        char[] charArr = s.toCharArray();
        for (int i = 0; i < charArr.length; i ++) {
            if (stack.isEmpty() && (charArr[i] == ')' || charArr[i] == ']' || charArr[i] == '}')) {
                return false;
            } else {
                if (!stack.isEmpty()) {
                    if (stack.peekFirst() == '(' && charArr[i] == ')') {
                        stack.pollFirst();
                    } else if (stack.peekFirst() == '[' && charArr[i] == ']') {
                        stack.pollFirst();
                    } else if (stack.peekFirst() == '{' && charArr[i] == '}') {
                        stack.pollFirst();
                    } else {
                        stack.offerFirst(charArr[i]);
                    }
                } else {
                    stack.offerFirst(charArr[i]);
                }
            }
        }
        return stack.isEmpty();
    }        
}

/*
TC: O(n)
SC: O(n)
*/
