/* 
49. Group Anagrams
https://leetcode.com/problems/group-anagrams/
*/

class Solution {
	public List<List<String>> groupAnagrams(String[] strs) {
    if (strs == null || strs.length == 0) return new ArrayList<>();	
		Map<String, List<String>> hashMap = new HashMap<>();
		
		for (String s : strs) {
            char[] count = new char[26];
			for (char c : s.toCharArray()) count[c - 'a'] ++;
            String key = String.valueOf(count);
            if (!hashMap.containsKey(key)) hashMap.put(key, new ArrayList<>());
            hashMap.get(key).add(s);   
		}
        return new ArrayList<>(hashMap.values());	
    }
}

/*
Time Complexity: O(NK), 
where N is the length of strs, and K is the maximum length of a string in strs. 
Counting each string is linear in the size of the string, and we count every string.

Space Complexity: O(NK)
the total information content stored in ans.
*/

/*
We can transform each string into a character count, consisting of 26 non-negative integers representing the number of a's, b's, c's, etc. 
We use these counts as the key for our hash map.
the value would be all the strings of the same char count
*/
